<?php
/*
 * Project: RED_ORM.
 * Author: Levan Ostrowski
 * User: cod3venom
 * Date: 19.10.2021
 * Time: 15:26
*/

namespace src;

use src\annotation\Annotation;
use src\annotation\dto\ColumnAnnotationTObject;
use src\database\drivers\mysql\MySqlDriver;
use src\query_builder\helpers\AbstractResource;
use src\query_builder\helpers\Delete;
use src\query_builder\helpers\Insert;
use src\query_builder\helpers\Select;
use src\query_builder\helpers\Update;

class RedORM
{

    private string $table = "";
    private array $columns = [];
    private AbstractResource $query;

    public static function Connect(): RedORM
    {
        return new RedORM();
    }
    public function adoptClass(string $className): RedORM
    {
        $annotationPackage = Annotation::ParseClass($className);
        $this->table = $annotationPackage->tableAnnotationTObject->name;
        $this->columns = array_filter($annotationPackage->columnAnnotationObjects, function(ColumnAnnotationTObject $column) {
            return !$column->ignore && !$column->autoGenerated;
        }, ARRAY_FILTER_USE_BOTH);

        $this->columns = array_map(function (ColumnAnnotationTObject $column){
            return $column->name;
        }, $this->columns);

        return $this;
    }

    public function adoptTable(string $table): RedORM
    {
        $this->table = $table;
        return $this;
    }

    public function adoptColumns(array $columns): RedORM
    {
        $this->columns = $columns;
        return $this;
    }

    public function Insert(): RedORM {
        $this->query = (new Insert($this->columns))->into($this->table);
        $this->query->create_stmt($this->query);
        return $this;
    }

    public function Select($params = []): Select
    {
        $this->query = (new Select($this->columns))->from($this->table);
        $this->query->create_stmt($this->query);
        if (count($params) && strpos($this->query, "?")) {
            $this->query->bind_params($params);
        }

        return $this->query;
    }

    public function Update(): RedORM
    {
        $this->query = (new Update($this->table));
        $this->query->create_stmt($this->query);
        return $this;
    }

    public function Delete(): RedORM
    {
        $this->query = (new Delete($this->table));
        $this->query->create_stmt($this->query);
        return $this;
    }

    public function getDriver(): MySqlDriver {
        return $this->query;
    }
}